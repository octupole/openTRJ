# Policy
cmake_minimum_required( VERSION 3.5) 


# Project name
project(openTRJ CXX C)


include(${CMAKE_SOURCE_DIR}/cmake/macros.cmake)

if (NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE "Release")
endif()
include(CheckCXXCompilerFlag)
include(CheckIncludeFileCXX)
include(CheckCXXSymbolExists)

if (NOT NO_PARALLEL)
   find_package(MPI)
   if (NOT MPI_CXX_FOUND)
      message(STATUS "========== OpenTRAJ Parallel Information ==========")
      message(STATUS )
      message(STATUS "No MPI compiler found. Perhaps you want to set one explicitly?")
      message(STATUS "To override the default compiler, set the environment variable")
      message(STATUS "     export CXX=/full/path/to/mpic++")
      message(STATUS "in bash or ksh or sh.  In csh or tcsh, use:")
      message(STATUS "     setenv CXX /full/path/to/mpic++")
      message(STATUS "before running the cmake command.")
      message(STATUS )
      message(STATUS "=================================================")
   endif()
   IF ( MPI_CXX_FOUND )
      INCLUDE_DIRECTORIES(${MPI_CXX_INCLUDE_PATH})
      if(DEFINED $ENV{CXX})
        message(STATUS "Found MPI compiler, but using the CXX compiler set in the CXX environment variable, $ENV{CXX}")
      else()
        set(CMAKE_CXX_COMPILER ${MPI_CXX_COMPILER})
        set(ENV{CXX} ${MPI_CXX_COMPILER})
      endif()
   ENDIF()
   include(FindOpenMP)
endif()
set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules ${CMAKE_MODULE_PATH} ) 

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 3.2)
        message(FATAL_ERROR "Clang version must be at least 3.2!")
    endif()
    set(CMAKE_CXX_FLAGS "-std=c++11 -O3 ${OpenMP_CXX_FLAGS}")        ## Optimize	
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 5.4)
        message(FATAL_ERROR "GCC version must be at least 5.4")
    endif()
   set(CMAKE_CXX_FLAGS "-std=c++11 -O3 -ffast-math -fno-math-errno ${OpenMP_CXX_FLAGS}")  
endif()
if (OpenMP_CXX_FLAGS)
	add_definitions(-DHAVE_OPENMP=1)
	find_package(FFTW3 COMPONENTS "double" "threads")
else()
	find_package(FFTW3 COMPONENTS "double")
endif()
#include(FindFFTW3.cmake)



if (FFTW3_FOUND)
  include_directories (${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR} ${FFTW3_INCLUDE_DIR})
  INCLUDE_DIRECTORIES(${FFTW3_INCLUDE_DIR})
  LINK_LIBRARIES(${FFTW3_LIBRARIES})
ELSE(FFTW3_FOUND)
  MESSAGE(FATAL_ERROR "No fftw3 found - Cannot run")
endif (FFTW3_FOUND)


LONG_TODAY(BUILD_DATE)
include_directories("include")
include_directories("data")
include_directories("${PROJECT_SOURCE_DIR}/xdr/include")
include_directories("${PROJECT_SOURCE_DIR}/voro++/include")
include_directories("${PROJECT_SOURCE_DIR}/alglib/include")
include_directories("${PROJECT_SOURCE_DIR}/libtraj")

add_subdirectory(alglib)
add_subdirectory(xdr)
add_subdirectory(voro++)
add_subdirectory(libtraj)
add_subdirectory(Molecules)
add_subdirectory(Voronoi)
add_subdirectory(Properties)
add_subdirectory(Execute)
add_subdirectory(Saxs)
#--------------------------------  Include directories for specific targets -----------------------
target_include_directories(Execute PUBLIC "${PROJECT_SOURCE_DIR}/Properties" "${PROJECT_SOURCE_DIR}/Molecules" "${PROJECT_SOURCE_DIR}/Voronoi")
target_include_directories(ExecuteSaxs PUBLIC "${PROJECT_SOURCE_DIR}/Properties" "${PROJECT_SOURCE_DIR}/Molecules" "${PROJECT_SOURCE_DIR}/Saxs" )
target_include_directories(Properties PUBLIC "${PROJECT_SOURCE_DIR}/Molecules")
target_include_directories(mols PUBLIC "${PROJECT_SOURCE_DIR}/Properties")
target_include_directories(saxs PUBLIC "${PROJECT_SOURCE_DIR}/Properties" "${PROJECT_SOURCE_DIR}/Molecules")
target_include_directories(Voronoi PUBLIC "${PROJECT_SOURCE_DIR}/Molecules" "${PROJECT_SOURCE_DIR}/Properties" )


add_executable(trjVoronoi trjVoronoi.cpp)
add_executable(trjProp trjProp.cpp)
add_executable(trjSaxs trjSaxs.cpp)
add_executable(fitSaxs FitSaxs.cpp)

#--------------------------------  Include directories for specific executables -----------------------

target_include_directories(trjVoronoi PUBLIC "${PROJECT_SOURCE_DIR}/Execute")
target_include_directories(trjProp PUBLIC "${PROJECT_SOURCE_DIR}/Execute")
target_include_directories(trjSaxs PUBLIC "${PROJECT_SOURCE_DIR}/Execute/Saxs")
target_include_directories(fitSaxs PUBLIC "${PROJECT_SOURCE_DIR}/Execute/FitSaxs")

#--------------------------------  Link libraries in the appropriate order ! -----------------------

target_link_libraries(trjVoronoi Execute Voronoi voro++ mols traj Properties alglib xdrfile)
target_link_libraries(trjProp Execute Voronoi voro++ mols traj Properties alglib xdrfile)
target_link_libraries(trjSaxs ExecuteSaxs saxs mols traj Properties alglib xdrfile )
target_link_libraries(fitSaxs ExecuteFit traj alglib)

if (CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
    set (CMAKE_INSTALL_PREFIX "$ENV{HOME}" CACHE PATH "default install path" FORCE )
endif()
install(TARGETS trjVoronoi trjProp trjSaxs fitSaxs RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/bin" COMPONENT executable)
message( STATUS)
message( STATUS "========== OpenTRJ Build Information ===========")
message( STATUS "Current date/time .......... = ${BUILD_DATE}")
message( STATUS "CMAKE_SYSTEM ............... = ${CMAKE_SYSTEM}")
message( STATUS "================================================")
message( STATUS "CMAKE_BUILD_TYPE ........... = ${CMAKE_BUILD_TYPE}")
message( STATUS "CMAKE_INSTALL_PREFIX ....... = ${CMAKE_INSTALL_PREFIX}")
message( STATUS "CMAKE_C_COMPILER ........... = ${CMAKE_C_COMPILER}")
message( STATUS "CMAKE_CXX_COMPILER ......... = ${CMAKE_CXX_COMPILER}")
message( STATUS "MPI_CXX_COMPILER ........... = ${MPI_CXX_COMPILER}")
message( STATUS "MPI_CXX_INCLUDE_PATH ....... = ${MPI_CXX_INCLUDE_PATH}")
message( STATUS "MPI_CXX_LIBRARIES .......... = ${MPI_CXX_LIBRARIES}")
if (OpenMP_CXX_FLAGS)
	message(STATUS  "Compiled with OPENMP ....... = YES")
else()
	message(STATUS  "Compiled with OPENMP ....... = NO ")
endif()

message( STATUS "FFTW3_INCLUDE_DIR .......... = ${FFTW3_INCLUDE_DIR}")
message( STATUS "FFTW3_LIBRARIES ............ = ${FFTW3_LIBRARIES}")
message( STATUS "To override these options, add -D{OPTION_NAME}=... to the cmake command" )
message( STATUS "Particularly useful defines are for:")
message( STATUS )
message( STATUS "  -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} (where OpenTRJ executables will be installed)")
message( STATUS "            -DFFTW3_ROOT=/path/to/fftw3")
message( STATUS )

