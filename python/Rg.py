#!/usr/bin/env python
# encoding: utf-8
'''
Rg -- shortdesc

Rg is a description

It defines classes_and_methods

@author:     user_name

@copyright:  2017 organization_name. All rights reserved.

@license:    license

@contact:    user_email
@deffield    updated: Updated
'''

import sys
import os
import argparse
import time

import Micelles.Utilities.openFile as openFile

import Micelles.jsonRg.ClustersN as Clusters

__all__ = []
__version__ = 0.1
__date__ = '2017-12-12'
__updated__ = '2017-12-12'

def parse_args(version,epilog,description):
    parser = argparse.ArgumentParser(description=description+epilog)
    
    parser.add_argument("-f", "--file", dest="filename", default=None,  type=str,
                      help="set remote or local input filename", metavar="FILE",required=True)
    parser.add_argument("-o", "--out", dest="fileout", default=None,  type=str,
                      help="set output file if 'None' output is the standard output [default: %(default)s]", metavar="FILE")
    parser.add_argument("--host", dest="hostname", default=None,type=str,
                      help="set remote host name, if None local host is used [default: %(default)s ]")
    parser.add_argument("--user", dest="username", default=None,type=str,
                      help="set remote user name [default: %(default)s]")
    parser.add_argument("-b", "--begin", dest="Start", default=None,type=int, 
                      help="set trajectory start point on the trajectory, if None use the first step [default: %(default)s]")
    parser.add_argument("-e", "--end", dest="End", default=None, type=int, 
                      help="set trajectory end point. If None use the last step [default: %(default)s]")
    parser.add_argument('--version', action='version', version=version)
    parser.add_argument("--mols", action="store", dest="molecules", default=None,type=str,
                      help='Pick the name of the molecule Tagging the clusters, usually the detergent. You can give a list'+
                      '\nbut only the first label will be retained.')
    parser.add_argument("--histo", action="store_true", dest="histo",
                      default=False,help="Compute gyration histogram")
    parser.add_argument("--agg", action="store_true", dest="aggregation",
                      default=False,help="Compute time evolution of aggregation number")
   
    args = parser.parse_args()

    if not args.hostname and args.username or args.hostname and not args.username:
        parser.error('Both usernane and hostname must be None or set.')
         
    return args

def main(argv=None):
    '''Command line options.'''
    
    
    program_name = os.path.basename(sys.argv[0])
    program_version = "v0.1"
    program_build_date = "%s" % __updated__

    program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
    # program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
    program_longdesc = "Copyright 2017 Massimo Marchi (CEA Saclay)                                            \
                Licensed under the GNU GPL v3.0 \nhttp://www.gnu.org/licenses/gpl-3.0.txt"
    description = (
        'Command line interface for computing Voronoi volumes and surfaces '
        '------------------------------------------------------------'
        '--------------\n'
        'htrgtps://github.com/octupole\n')

    try:
        opts = parse_args(version=program_version_string, epilog=program_longdesc, description=description)
        if opts.filename and not (opts.username and opts.hostname):
            print("Reading %-s from local account" % opts.filename)
        if opts.username and opts.hostname:
            print("Reading %-s from the account %s@%-s" % (opts.filename,opts.username,opts.hostname))
        if opts.molecules:
            if len(opts.molecules.split()) >1:
                opts.molecules=[mol.strip() for mol in opts.molecules.split()]

        start_time = time.time()
        myFile=openFile.openFile(filename=opts.filename,host=opts.hostname,user=opts.username)
        print("--- Open the input file %s seconds ---" % (time.time() - start_time))
        start_time = time.time()
        clust=Clusters.Clusters(openfile=myFile.fp(),fileout=opts.fileout,start_=opts.Start,end_=opts.End,molecules=opts.molecules)
        clust.read()
        print("--- Read the input file %s seconds ---" % (time.time() - start_time))
        start_time = time.time()
        clust.trajectory()
        print("--- Compute trajectory %s seconds ---" % (time.time() - start_time))
        start_time = time.time()
        clust.avg()
        print("--- Compute averages %s seconds ---" % (time.time() - start_time))
        if opts.histo:
            start_time = time.time()
            clust.histograms()
            print("--- Compute histogram %s seconds ---" % (time.time() - start_time))
        if opts.aggregation:
            start_time = time.time()
            clust.aggregation()
            print("--- Compute aggregation %s seconds ---" % (time.time() - start_time))
            
        # MAIN BODY #
        
    except Exception as e:
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help\n")
        return 2


if __name__ == "__main__":
    main()